version: '3.9'

services:
  # Main application with MCPs
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: less-to-tailwind-parser
    hostname: less-to-tailwind
    
    # Volumes for workspace and data persistence
    volumes:
      # Main workspace - writable
      - ./:/workspace
      # Node modules - named volume to avoid sync issues
      - node_modules:/workspace/node_modules
      # PostgreSQL data
      - postgres_data:/var/lib/postgresql/data
      # MCP configuration and logs
      - mcp_config:/root/.mcp
      - mcp_logs:/var/log/mcp
    
    # Environment variables
    environment:
      # Node
      NODE_ENV: production
      NODE_OPTIONS: --max-old-space-size=2048
      
      # Database
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: less_to_tailwind
      DATABASE_USER: postgres
      DATABASE_PASSWORD: ${DATABASE_PASSWORD:-postgres}
      DATABASE_URL: postgresql://postgres:${DATABASE_PASSWORD:-postgres}@postgres:5432/less_to_tailwind
      
      # MCP Configuration
      MCP_CONFIG_PATH: /root/.mcp-config.json
      MCP_SERVER_PORT: 9000
      MCP_LOG_LEVEL: debug
      
      # Filesystem MCP - workspace access
      MCP_FILESYSTEM_ROOTS: /workspace
      MCP_FILESYSTEM_ALLOWED_PATHS: /workspace
      
      # Git MCP - repository access
      MCP_GIT_REPOS: /workspace
      
      # PostgreSQL MCP - connection
      MCP_POSTGRES_HOST: postgres
      MCP_POSTGRES_PORT: 5432
      MCP_POSTGRES_DATABASE: less_to_tailwind
      MCP_POSTGRES_USER: postgres
      MCP_POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-postgres}
      
      # Sequential Thinking
      ENABLE_THINKING: "true"
      THINKING_BUDGET: "10000"
      
      # Claude API
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
    
    # Port mappings
    ports:
      # Main application
      - "3000:3000"
      # MCP servers
      - "9000:9000"   # Filesystem MCP
      - "9001:9001"   # PostgreSQL MCP
      - "9002:9002"   # Git MCP
      - "9003:9003"   # Sequential Thinking
    
    # Networking
    networks:
      - less-to-tailwind-network
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G
    
    # Restart policy
    restart: unless-stopped
    
    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Dependencies
    depends_on:
      postgres:
        condition: service_healthy
    
    # Additional settings
    stdin_open: true
    tty: true

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: less-to-tailwind-postgres
    hostname: postgres
    
    # Volumes
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/init-db.sql:/docker-entrypoint-initdb.d/01-init.sql
    
    # Environment
    environment:
      POSTGRES_DB: less_to_tailwind
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD:-postgres}
      POSTGRES_INITDB_ARGS: --encoding=UTF8 --locale=C
    
    # Ports
    ports:
      - "5432:5432"
    
    # Networking
    networks:
      - less-to-tailwind-network
    
    # Health check
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    
    # Restart policy
    restart: unless-stopped

  # Optional: Redis cache for future use
  redis:
    image: redis:7-alpine
    container_name: less-to-tailwind-redis
    hostname: redis
    
    # Volumes
    volumes:
      - redis_data:/data
    
    # Ports
    ports:
      - "6379:6379"
    
    # Networking
    networks:
      - less-to-tailwind-network
    
    # Health check
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    
    # Restart policy
    restart: unless-stopped

# Named volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  node_modules:
    driver: local
  mcp_config:
    driver: local
  mcp_logs:
    driver: local

# Networks
networks:
  less-to-tailwind-network:
    driver: bridge
